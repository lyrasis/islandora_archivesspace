<?php

/**
 * @file
 * Defines all the hooks this module implements.
 */

// Content Model.
define('ISLANDORA_ASPACE_OBJECT_CMODEL', 'islandora:aspaceCModel');

// DS Name.
define('ISLANDORA_ASPACE_DSID', 'ARCHIVESSPACE');

/**
 * Implements hook_init().
 */
function islandora_aspace_init() {
  require_once __DIR__ . "/vendor/autoload.php";
}

/**
 * Implements hook_menu().
 */
function islandora_aspace_menu() {
  $items = array();

  $items['admin/islandora/tools/aspace'] = array(
    'title' => 'ArchivesSpace Integration',
    'description' => 'Configure settings for Islandora ArchivesSpace integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_aspace_admin_form'),
    'file' => 'includes/admin.form.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/islandora/tools/aspace/config'] = array(
    'title' => 'Settings',
    'description' => 'Configure settings for Islandora ArchivesSpace integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_aspace_admin_form'),
    'file' => 'includes/admin.form.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/islandora/tools/aspace/templates'] = array(
    'title' => 'Templates',
    'description' => 'Configure metadata templates for integration.',
    'page callback' => 'islandora_aspace_templates',
    'file' => 'includes/templates.form.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/islandora/tools/aspace/templates/create'] = array(
    'title' => 'Create Template',
    'description' => 'Create a new template.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_aspace_template_create_form'),
    'file' => 'includes/templates.form.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/islandora/tools/aspace/templates/delete/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_aspace_template_delete_form', 6),
    'file' => 'includes/templates.form.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/islandora/tools/aspace/templates/copy/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_aspace_template_copy_form', 6),
    'file' => 'includes/templates.form.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/islandora/tools/aspace/templates/edit/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_aspace_template_create_form', 6),
    'file' => 'includes/templates.form.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_aspace_islandora_ingest_steps(array $form_state) {
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  $intersection = array_intersect($shared_storage['models'], variable_get('islandora_aspace_enabled_models', array()));
  if (count($intersection) > 0) {
    return array(
      'islandora_aspace_step_enable_form' => array(
        'type' => 'form',
        'weight' => -5,
        'form_id' => 'islandora_aspace_step_enable_form',
        'file' => 'includes/ingest_steps.inc',
        'module' => 'islandora_aspace',
      ),
    );
  }
}

/**
 * Implements hook_islandora_ingest_steps_alter().
 */
function islandora_aspace_islandora_ingest_steps_alter(array &$steps, array &$form_state) {
  if (!isset($form_state['islandora']['step_storage']['islandora_aspace_step_enable_form']['islandora_aspace_enable'])) {
    return;
  }

  $enabled = $form_state['islandora']['step_storage']['islandora_aspace_step_enable_form']['islandora_aspace_enable'];
  if ($enabled) {
    // Don't use the normal MODs form.
    if (isset($steps['xml_form_builder_metadata_step']) && $steps['xml_form_builder_metadata_step']['args'][0]['dsid'] == 'MODS') {
      unset($steps['xml_form_builder_metadata_step']);
    }

    // Don't use the normal form association selector.
    if (isset($steps['xml_form_builder_association_step'])) {
      unset($steps['xml_form_builder_association_step']);
    }

    // Do add a basic metadata form for the archivesspace ingest.
    $steps['islandora_aspace_step_metadata_form'] = array(
      'type' => 'form',
      'weight' => -4,
      'form_id' => 'islandora_aspace_step_metadata_form',
      'file' => 'includes/ingest_steps.inc',
      'module' => 'islandora_aspace',
    );

    // Do add the callback to create the archivesspace object.
    $steps['islandora_aspace_step_object_create_callback'] = array(
      'type' => 'callback',
      'weight' => 50,
      'do_function' => array(
        'function' => 'islandora_aspace_step_object_create_callback',
      ),
      'file' => 'includes/ingest_steps.inc',
      'module' => 'islandora_aspace',
    );
  }
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_aspace_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_aspace');

  // ArchivesSpace Content Model.
  $aspace_content_model = $connection->repository->constructObject(ISLANDORA_ASPACE_OBJECT_CMODEL);
  $aspace_content_model->owner = 'fedoraAdmin';
  $aspace_content_model->label = 'Islandora ArchivesSpace Content Model';
  $aspace_content_model->models = 'fedora-system:ContentModel-3.0';

  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $aspace_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_aspace_ds_composite_model.xml", FALSE);
  $aspace_content_model->ingestDatastream($datastream);

  return array(
    'islandora_aspace' => array(
      'title' => 'Islandora ArchivesSpace',
      'objects' => array(
        $aspace_content_model,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_undeletable_datastreams().
 */
function islandora_aspace_islandora_undeletable_datastreams(array $models) {
  if (in_array(ISLANDORA_ASPACE_OBJECT_CMODEL, $models)) {
    return array(ISLANDORA_ASPACE_DSID, 'MODS');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function islandora_aspace_form_islandora_object_properties_form_alter(&$form, &$form_state, $form_id) {
  $object = islandora_object_load($form['pid']['#value']);
  if (in_array(ISLANDORA_ASPACE_OBJECT_CMODEL, $object->models)) {
    $form['object_state']['#disabled'] = TRUE;
    $form['object_label']['#disabled'] = TRUE;
    $form['archivesspace_info'] = array(
      '#markup' => '<h1>' . t('This item is managed in ArchivesSpace, please manage its properties there.') . '</h1>',
      '#weight' => -10,
    );
  }
}

/**
 * Implements hook_hook_theme_registry_alter().
 */
function islandora_aspace_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'islandora_aspace');

  $theme_registry['islandora_default_edit']['includes'][] = "{$path}/theme/theme.inc";
  $theme_registry['islandora_default_edit']['preprocess functions'][] = 'islandora_aspace_preprocess_islandora_default_edit';
}

/**
 * Implements hook_services_resources().
 */
function islandora_aspace_services_resources() {
  return array(
    'islandora_aspace' => array(
      'create' => array(
        'help' => 'Creates the link from and Islandora object to ArchivesSpace object.',
        'file' => array(
          'type' => 'inc',
          'module' => 'islandora_aspace',
          'name' => 'includes/rest',
        ),
        'callback' => 'islandora_aspace_rest_create',
        'access callback' => 'islandora_aspace_rest_access',
        'args' => array(
          array(
            'name' => 'pid',
            'type' => 'string',
            'description' => 'The pid of the object to update',
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
          array(
            'name' => 'data',
            'type' => 'struct',
            'description' => 'The data for the object being updated',
            'source' => 'data',
            'optional' => FALSE,
          ),
        ),
      ),
      'update' => array(
        'help' => 'Updates an Islandora object with assoicated ArchivesSpace data.',
        'file' => array(
          'type' => 'inc',
          'module' => 'islandora_aspace',
          'name' => 'includes/rest',
        ),
        'callback' => 'islandora_aspace_rest_update',
        'access callback' => 'islandora_aspace_rest_access',
        'args' => array(
          array(
            'name' => 'pid',
            'type' => 'string',
            'description' => 'The pid of the object to update',
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
          array(
            'name' => 'data',
            'type' => 'struct',
            'description' => 'The data for the object being updated',
            'source' => 'data',
            'optional' => FALSE,
          ),
        ),
      ),
      'retrieve' => array(
        'help' => 'Retreieves information about an Islandora objects ArchivesSpace connection.',
        'file' => array(
          'type' => 'inc',
          'module' => 'islandora_aspace',
          'name' => 'includes/rest',
        ),
        'callback' => 'islandora_aspace_rest_retrieve',
        'access callback' => 'islandora_aspace_rest_access',
        'args' => array(
          array(
            'name' => 'pid',
            'type' => 'string',
            'description' => 'The pid of the object to update',
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
        ),
      ),
      'delete' => array(
        'help' => 'Updates an islandora to delete archivesspace connection.',
        'file' => array(
          'type' => 'inc',
          'module' => 'islandora_aspace',
          'name' => 'includes/rest',
        ),
        'callback' => 'islandora_aspace_rest_delete',
        'access callback' => 'islandora_aspace_rest_access',
        'args' => array(
          array(
            'name' => 'pid',
            'type' => 'string',
            'description' => 'The pid of the object to update',
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function islandora_aspace_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array(
      'version' => 3,
      'file' => 'rest.inc',
      'path' => drupal_get_path('module', 'islandora_aspace') . '/includes',
    );
  }
}

/**
 * Implements hook_cmodel_pid_islandora_object_alter().
 */
function islandora_aspace_islandora_aspaceCModel_islandora_object_alter(AbstractObject $object, array &$context) {
  module_load_include('inc', 'islandora_aspace', 'includes/archivesspace');
  if ($context['action'] == 'purge') {
    $data = json_decode($object['ARCHIVESSPACE']->content, TRUE);
    $return = islandora_aspace_delete_deposit($data['uri']);
    if ($return->code != 200) {
      watchdog(
        'islandora_aspace',
        'Unable to notify ArchivesSpace of delete for PID: @pid. Error code: @code. Data: @body.',
        array(
          '@pid' => $object->id,
          '@code' => $return->code,
          '@body' => $return->data,
        ),
        WATCHDOG_ERROR
      );
      drupal_set_message(t('Error notifying ArchivesSpace of delete.'), 'error');
    }
  }
}

/**
 * Implements hook_islandora_aspace_template_paths().
 */
function islandora_aspace_islandora_aspace_template_paths() {
  $module_path = drupal_get_path('module', 'islandora_aspace');
  return "${module_path}/templates";
}
